##week 3
## Example: Classifying Cancer Samples ----
## Step 2: Exploring and preparing the data ----
getwd()
getwd
getwd()
getwd()
setwd("E:\IntelligentSystem\Demos")
getwd()
getwd()
setwd("E:\IntelligentSystem\Demos")
# import the CSV file
wbcd <- read.csv("wisc_breastCancer_data.csv", stringsAsFactors = FALSE)
##week 3
## Example: Classifying Cancer Samples ----
## Step 2: Exploring and preparing the data ----
getwd()
setwd(""C:/Downloads"")
setwd("C:/Downloads")
# import the CSV file
wbcd <- read.csv("wisc_breastCancer_data.csv", stringsAsFactors = FALSE)
# examine the structure of the wbcd data frame
str(wbcd)
# drop the id feature
wbcd <- wbcd[-1]
# table of diagnosis
table(wbcd$diagnosis)
# recode diagnosis as a factor
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# load the "class" library
--install.packages("class")
# load the "class" library
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# load the "gmodels" library
library(gmodels)
##week 3
## Example: Classifying Cancer Samples ----
## Step 2: Exploring and preparing the data ----
getwd()
setwd("C:/Downloads")
# import the CSV file
wbcd <- read.csv("wisc_breastCancer_data.csv", stringsAsFactors = FALSE)
# examine the structure of the wbcd data frame
str(wbcd)
# drop the id feature
wbcd <- wbcd[-1]
# table of diagnosis
table(wbcd$diagnosis)
# recode diagnosis as a factor
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# summarize three numeric features
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the wbcd data
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirm that normalization worked
summary(wbcd_n$area_mean)
# create training and test data
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
# create labels for training and test data
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
## Step 3: Training a model on the data ----
# load the "class" library
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
## Step 4: Evaluating model performance ----
# load the "gmodels" library
library(gmodels)
# Create the cross tabulation of predicted vs. actual
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
install.packages("class")
##week 3
## Example: Classifying Cancer Samples ----
## Step 2: Exploring and preparing the data ----
getwd()
setwd("C:/Downloads")
# import the CSV file
wbcd <- read.csv("wisc_breastCancer_data.csv", stringsAsFactors = FALSE)
# examine the structure of the wbcd data frame
str(wbcd)
# drop the id feature
wbcd <- wbcd[-1]
# table of diagnosis
table(wbcd$diagnosis)
# recode diagnosis as a factor
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# summarize three numeric features
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the wbcd data
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirm that normalization worked
summary(wbcd_n$area_mean)
# create training and test data
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
# create labels for training and test data
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
## Step 3: Training a model on the data ----
# load the "class" library
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
## Step 4: Evaluating model performance ----
# load the "gmodels" library
library(gmodels)
# Create the cross tabulation of predicted vs. actual
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
## Week 5: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
getwd()
## Step 2: Exploring and preparing the data ----
# read in data and examine structure
social <- read.csv("social.csv")
View(social)
str(dataset)
getwd()
setwd("E:\\IntelligentSystem\\SD745Homework\\week6")
train_dataset <- read.csv('train.csv', header = TRUE)
test_dataset <- read.csv('train.csv', header = TRUE)
summary(train_dataset)
train_dataset$Loan_ID = NULL
View(train_dataset)
totalIncomeTrain
setwd("E:\\IntelligentSystem\\SD745Homework\\week6")
train_dataset <- read.csv('train.csv', header = TRUE)
test_dataset <- read.csv('train.csv', header = TRUE)
summary(train_dataset)
train_dataset$Loan_ID = NULL
View(train_dataset)
#combining ApplicantIncome and Coapplicant Income
totalIncomeTrain = train_dataset$ApplicantIncome + train_dataset$CoapplicantIncome
train_dataset = cbind(train_dataset, totalIncomeTrain)
train_dataset$ApplicantIncome = NULL
train_dataset$CoapplicantIncome = NULL
str(train_dataset)
#converting into factors
train_dataset$Gender = factor(train_dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
train_dataset$Married = factor(train_dataset$Married, levels = c('Yes', 'No'), labels = c(0,1))
train_dataset$Dependents = factor(train_dataset$Dependents, levels = c('0','1','2','3+'), labels = c(0,1,2,3))
train_dataset$Education = factor(train_dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
train_dataset$Self_Employed = factor(train_dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
train_dataset$Property_Area = factor(train_dataset$Property_Area, levels = c('Rural','Semiurban', 'Urban'), labels = c(0,1,2))
train_dataset$Credit_History = factor(train_dataset$Credit_History, levels = c("0","1"), labels = c(0,1))
train_dataset$Loan_Status = factor(train_dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
#missing data of LoanAmount, loan term
#missing values of gender, married, education, .selfemployment and prperty area
train_dataset$LoanAmount = ifelse(is.na(train_dataset$Loan_Amount_Term),
ave(train_dataset$Loan_Amount_Term, FUN = function(x)mean(x, na.rm = TRUE
)),
train_dataset$Loan_Amount_Term)
train_dataset$Gender = ifelse(is.na(train_dataset$Gender), NA %in% 1, train_dataset$Gender)
train_dataset$Married = ifelse(is.na(train_dataset$Married), NA %in% 1, train_dataset$Married)
train_dataset$Dependents = ifelse(is.na(train_dataset$Dependents),NA %in% 1, train_dataset$Dependents)
train_dataset$Education = ifelse(is.na(train_dataset$Education), NA %in% 1, train_dataset$Education)
train_dataset$Self_Employed = ifelse(is.na(train_dataset$Self_Employed),NA %in% 1, train_dataset$Self_Employed)
train_dataset$Credit_History = ifelse(is.na(train_dataset$Credit_History),NA %in% 1, train_dataset$Credit_History)
str(train_dataset)
train_dataset$Gender = as.numeric(train_dataset$Gender)
train_dataset$Married = as.numeric(train_dataset$Married)
train_dataset$Education = as.numeric(train_dataset$Education)
train_dataset$Self_Employed = as.numeric(train_dataset$Self_Employed)
train_dataset$Property_Area = as.numeric(train_dataset$Property_Area)
train_dataset$Dependents = as.numeric(train_dataset$Dependents)
train_dataset$Credit_History = as.numeric(train_dataset$Credit_History)
#scaling for normalization
train_dataset[,6:9] = scale(train_dataset[,6:9])
train_dataset$totalIncomeTrain = scale(train_dataset$totalIncomeTrain)
View(train_dataset)
str(train_dataset)
#SVM Model
library(e1071)
str(train_dataset)
View(train_dataset)
library(caTools)
set.seed(123)
split = sample.split(train_dataset$Loan_Status,SplitRatio = 0.75)
setwd("C:\\univChicago\\IntelligentSystems\\week6\\assignment\\dataset\\Loan-Prediction-Dataset-master")
dataset  <- read.csv('train.csv', header = TRUE)
#testdata  <- read.csv('test.csv', header = TRUE)
summary(dataset)
#summary(testdata)
#Data preprocessing
#Loan_ID = testdata$Loan_ID
dataset$Loan_ID = NULL
View(dataset)
totalincometrain = dataset$ApplicantIncome + dataset$CoapplicantIncome
dataset = cbind(dataset, totalincometrain)
dataset$ApplicantIncome = NULL
dataset$CoapplicantIncome = NULL
str(dataset)
#Converting these data to factor
dataset$Gender = factor(dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
dataset$Married = factor(dataset$Married, levels = c('Yes','No'), labels = c(0,1))
dataset$Education = factor(dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
dataset$Self_Employed = factor(dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
dataset$Property_Area = factor(dataset$Property_Area, levels = c('Rural','Semiurban', 'Urban'), labels = c(0,1,2))
dataset$Dependents = factor(dataset$Dependents, levels =  c('0','1','2','3+'), labels = c(0,1,2,3))
dataset$Credit_History = factor(dataset$Credit_History, levels = c("0","1"), labels = c(0,1))
dataset$Loan_Status = factor(dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
#test_set
#dealing with missing data of LoanAmount, Loan_Amount_Term
#dealing with missing values in Gender, Married, Education, Self_Employed and Property_Area using median
dataset$LoanAmount = ifelse(is.na(dataset$LoanAmount),
ave(dataset$LoanAmount, FUN = function(x)mean(x, na.rm = TRUE
)),
dataset$LoanAmount)
dataset$Loan_Amount_Term = ifelse(is.na(dataset$Loan_Amount_Term),
ave(dataset$Loan_Amount_Term, FUN = function(x)mean(x, na.rm = TRUE
)),
dataset$Loan_Amount_Term)
#imputing categorical variables. Other techniques available too such as randomly assigning 0 an 1 to missing values for categorical variables
dataset$Gender = ifelse(is.na(dataset$Gender), NA %in% 1, dataset$Gender)
dataset$Married = ifelse(is.na(dataset$Married), NA %in% 1, dataset$Married)
dataset$Dependents = ifelse(is.na(dataset$Dependents),NA %in% 1, dataset$Dependents)
dataset$Education = ifelse(is.na(dataset$Education), NA %in% 1, dataset$Education)
dataset$Self_Employed = ifelse(is.na(dataset$Self_Employed),NA %in% 1, dataset$Self_Employed)
dataset$Credit_History = ifelse(is.na(dataset$Credit_History),NA %in% 1, dataset$Credit_History)
str(dataset)
# In older version of R If you encoded your categorical variables as numeric but casted them as factors, you will get this error
# so i am converting them into numeric
dataset$Gender = as.numeric(dataset$Gender)
dataset$Married = as.numeric(dataset$Married)
dataset$Education = as.numeric(dataset$Education)
dataset$Self_Employed = as.numeric(dataset$Self_Employed)
dataset$Property_Area = as.numeric(dataset$Property_Area)
dataset$Dependents = as.numeric(dataset$Dependents)
dataset$Credit_History = as.numeric(dataset$Credit_History)
#dataset$Loan_Status = as.numeric(dataset$Loan_Status)
#Feature scaling ..Needed for normalization
dataset[,6:9] = scale(dataset[,6:9])
dataset$totalincometrain = scale(dataset$totalincometrain)
View(dataset)
str(dataset)
View(dataset)
View(test_dataset)
View(dataset)
training_set = train_dataset[split,]
test_set = train_dataset
test_set = train_dataset[-split, ]
classifier= svm (Loan_Status ~., data = training_set , kernal = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
View(test_set)
setwd("C:\\univChicago\\IntelligentSystems\\week6\\assignment\\dataset\\Loan-Prediction-Dataset-master")
dataset  <- read.csv('train.csv', header = TRUE)
#testdata  <- read.csv('test.csv', header = TRUE)
summary(dataset)
#summary(testdata)
#Data preprocessing
#Loan_ID = testdata$Loan_ID
dataset$Loan_ID = NULL
View(dataset)
totalincometrain = dataset$ApplicantIncome + dataset$CoapplicantIncome
dataset = cbind(dataset, totalincometrain)
dataset$ApplicantIncome = NULL
dataset$CoapplicantIncome = NULL
str(dataset)
#Converting these data to factor
dataset$Gender = factor(dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
dataset$Married = factor(dataset$Married, levels = c('Yes','No'), labels = c(0,1))
dataset$Education = factor(dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
dataset$Self_Employed = factor(dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
dataset$Property_Area = factor(dataset$Property_Area, levels = c('Rural','Semiurban', 'Urban'), labels = c(0,1,2))
dataset$Dependents = factor(dataset$Dependents, levels =  c('0','1','2','3+'), labels = c(0,1,2,3))
dataset$Credit_History = factor(dataset$Credit_History, levels = c("0","1"), labels = c(0,1))
dataset$Loan_Status = factor(dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
#test_set
#dealing with missing data of LoanAmount, Loan_Amount_Term
#dealing with missing values in Gender, Married, Education, Self_Employed and Property_Area using median
dataset$LoanAmount = ifelse(is.na(dataset$LoanAmount),
ave(dataset$LoanAmount, FUN = function(x)mean(x, na.rm = TRUE
)),
dataset$LoanAmount)
dataset$Loan_Amount_Term = ifelse(is.na(dataset$Loan_Amount_Term),
ave(dataset$Loan_Amount_Term, FUN = function(x)mean(x, na.rm = TRUE
)),
dataset$Loan_Amount_Term)
#imputing categorical variables. Other techniques available too such as randomly assigning 0 an 1 to missing values for categorical variables
dataset$Gender = ifelse(is.na(dataset$Gender), NA %in% 1, dataset$Gender)
dataset$Married = ifelse(is.na(dataset$Married), NA %in% 1, dataset$Married)
dataset$Dependents = ifelse(is.na(dataset$Dependents),NA %in% 1, dataset$Dependents)
dataset$Education = ifelse(is.na(dataset$Education), NA %in% 1, dataset$Education)
dataset$Self_Employed = ifelse(is.na(dataset$Self_Employed),NA %in% 1, dataset$Self_Employed)
dataset$Credit_History = ifelse(is.na(dataset$Credit_History),NA %in% 1, dataset$Credit_History)
str(dataset)
# In older version of R If you encoded your categorical variables as numeric but casted them as factors, you will get this error
# so i am converting them into numeric
dataset$Gender = as.numeric(dataset$Gender)
dataset$Married = as.numeric(dataset$Married)
dataset$Education = as.numeric(dataset$Education)
dataset$Self_Employed = as.numeric(dataset$Self_Employed)
dataset$Property_Area = as.numeric(dataset$Property_Area)
dataset$Dependents = as.numeric(dataset$Dependents)
dataset$Credit_History = as.numeric(dataset$Credit_History)
#dataset$Loan_Status = as.numeric(dataset$Loan_Status)
#Feature scaling ..Needed for normalization
dataset[,6:9] = scale(dataset[,6:9])
dataset$totalincometrain = scale(dataset$totalincometrain)
View(dataset)
str(dataset)
#SVM model
#install.packages('e1071')
library(e1071)
str(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Loan_Status, SplitRatio = 0.75)
#train<-dataset[1600,]
training_set = dataset[split,]
test_set = dataset[-split,]
classifier = svm(Loan_Status~., data = training_set , kernel = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
View(test_set)
#confusion matrix
table(test_set$Predicted_LoanStatus, test_set$Loan_Status)
summary(classifier)
setwd("E:\\IntelligentSystem\\SD745Homework\\week6")
train_dataset <- read.csv('train.csv', header = TRUE)
test_dataset <- read.csv('train.csv', header = TRUE)
summary(train_dataset)
train_dataset$Loan_ID = NULL
View(train_dataset)
#combining ApplicantIncome and Coapplicant Income
totalIncomeTrain = train_dataset$ApplicantIncome + train_dataset$CoapplicantIncome
train_dataset = cbind(train_dataset, totalIncomeTrain)
train_dataset$ApplicantIncome = NULL
train_dataset$CoapplicantIncome = NULL
str(train_dataset)
#converting into factors
train_dataset$Gender = factor(train_dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
train_dataset$Married = factor(train_dataset$Married, levels = c('Yes', 'No'), labels = c(0,1))
train_dataset$Dependents = factor(train_dataset$Dependents, levels = c('0','1','2','3+'), labels = c(0,1,2,3))
train_dataset$Education = factor(train_dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
train_dataset$Self_Employed = factor(train_dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
train_dataset$Property_Area = factor(train_dataset$Property_Area, levels = c('Rural','Semiurban', 'Urban'), labels = c(0,1,2))
train_dataset$Credit_History = factor(train_dataset$Credit_History, levels = c("0","1"), labels = c(0,1))
train_dataset$Loan_Status = factor(train_dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
#missing data of LoanAmount, loan term
#missing values of gender, married, education, .selfemployment and prperty area
train_dataset$LoanAmount = ifelse(is.na(train_dataset$Loan_Amount_Term),
ave(train_dataset$Loan_Amount_Term, FUN = function(x)mean(x, na.rm = TRUE
)),
train_dataset$Loan_Amount_Term)
train_dataset$Gender = ifelse(is.na(train_dataset$Gender), NA %in% 1, train_dataset$Gender)
train_dataset$Married = ifelse(is.na(train_dataset$Married), NA %in% 1, train_dataset$Married)
train_dataset$Dependents = ifelse(is.na(train_dataset$Dependents),NA %in% 1, train_dataset$Dependents)
train_dataset$Education = ifelse(is.na(train_dataset$Education), NA %in% 1, train_dataset$Education)
train_dataset$Self_Employed = ifelse(is.na(train_dataset$Self_Employed),NA %in% 1, train_dataset$Self_Employed)
train_dataset$Credit_History = ifelse(is.na(train_dataset$Credit_History),NA %in% 1, train_dataset$Credit_History)
str(train_dataset)
#converting to numeric
train_dataset$Gender = as.numeric(train_dataset$Gender)
train_dataset$Married = as.numeric(train_dataset$Married)
train_dataset$Education = as.numeric(train_dataset$Education)
train_dataset$Self_Employed = as.numeric(train_dataset$Self_Employed)
train_dataset$Property_Area = as.numeric(train_dataset$Property_Area)
train_dataset$Dependents = as.numeric(train_dataset$Dependents)
train_dataset$Credit_History = as.numeric(train_dataset$Credit_History)
#scaling for normalization
train_dataset[,6:9] = scale(train_dataset[,6:9])
train_dataset$totalIncomeTrain = scale(train_dataset$totalIncomeTrain)
View(train_dataset)
str(train_dataset)
#SVM Model
library(e1071)
str(train_dataset)
View(train_dataset)
library(caTools)
set.seed(123)
split = sample.split(train_dataset$Loan_Status,SplitRatio = 0.75)
training_set = train_dataset[split,]
test_set = train_dataset[-split, ]
classifier= svm (Loan_Status ~., data = training_set , kernal = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
View(test_set)
#confusion matrix
table(test_set$Predicted_LoanStatus, test_set$Loan_Status)
summary(classifier)
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
train_dataset$Predicted_LoanStatus = predict(classifier, newdata = test_set)
split = sample.split(train_dataset$Loan_Status,SplitRatio = 0.75)
training_set = train_dataset[split,]
test_set = train_dataset[-split, ]
classifier= svm (Loan_Status ~., data = training_set , kernal = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
summary(classifier)
summary(classifier)
library(caTools)
set.seed(123)
split = sample.split(train_dataset$Loan_Status,SplitRatio = 0.75)
training_set = train_dataset[split,]
test_set = train_dataset[-split, ]
classifier= svm (Loan_Status ~., data = training_set , kernal = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
test_dataset <- read.csv('train.csv', header = TRUE)
testset <- read.csv('train.csv', header = TRUE)
summary(test_dataset)
summary(testset)
#Data preprocessing
Loan_ID = testset$Loan_ID
View(testset)
test_set
setwd("E:\\IntelligentSystem\\SD745Homework\\week6")
train_dataset <- read.csv('train.csv', header = TRUE)
testset <- read.csv('train.csv', header = TRUE)
summary(train_dataset)
summary(testset)
#Data preprocessing
Loan_ID = testset$Loan_ID
train_dataset$Loan_ID = NULL
View(testset)
View(train_dataset)
#combining ApplicantIncome and Coapplicant Income
totalIncomeTrain = train_dataset$ApplicantIncome + train_dataset$CoapplicantIncome
train_dataset = cbind(train_dataset, totalIncomeTrain)
train_dataset$ApplicantIncome = NULL
train_dataset$CoapplicantIncome = NULL
#combining ApplicantIncome and Coapplicant Income testset
totalIncomeTrain = train_dataset$ApplicantIncome + train_dataset$CoapplicantIncome
train_dataset = cbind(train_dataset, totalIncomeTrain)
train_dataset$ApplicantIncome = NULL
train_dataset$CoapplicantIncome = NULL
str(train_dataset)
#converting into factors
train_dataset$Gender = factor(train_dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
train_dataset$Married = factor(train_dataset$Married, levels = c('Yes', 'No'), labels = c(0,1))
train_dataset$Dependents = factor(train_dataset$Dependents, levels = c('0','1','2','3+'), labels = c(0,1,2,3))
train_dataset$Education = factor(train_dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
train_dataset$Self_Employed = factor(train_dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
train_dataset$Property_Area = factor(train_dataset$Property_Area, levels = c('Rural','Semiurban', 'Urban'), labels = c(0,1,2))
train_dataset$Credit_History = factor(train_dataset$Credit_History, levels = c("0","1"), labels = c(0,1))
train_dataset$Loan_Status = factor(train_dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
test_set
#missing data of LoanAmount, loan term
#missing values of gender, married, education, .selfemployment and prperty area
train_dataset$LoanAmount = ifelse(is.na(train_dataset$Loan_Amount_Term),
ave(train_dataset$Loan_Amount_Term, FUN = function(x)mean(x, na.rm = TRUE
)),
train_dataset$Loan_Amount_Term)
train_dataset$Gender = ifelse(is.na(train_dataset$Gender), NA %in% 1, train_dataset$Gender)
train_dataset$Married = ifelse(is.na(train_dataset$Married), NA %in% 1, train_dataset$Married)
train_dataset$Dependents = ifelse(is.na(train_dataset$Dependents),NA %in% 1, train_dataset$Dependents)
train_dataset$Education = ifelse(is.na(train_dataset$Education), NA %in% 1, train_dataset$Education)
train_dataset$Self_Employed = ifelse(is.na(train_dataset$Self_Employed),NA %in% 1, train_dataset$Self_Employed)
train_dataset$Credit_History = ifelse(is.na(train_dataset$Credit_History),NA %in% 1, train_dataset$Credit_History)
str(train_dataset)
#converting to numeric
train_dataset$Gender = as.numeric(train_dataset$Gender)
train_dataset$Married = as.numeric(train_dataset$Married)
train_dataset$Education = as.numeric(train_dataset$Education)
train_dataset$Self_Employed = as.numeric(train_dataset$Self_Employed)
train_dataset$Property_Area = as.numeric(train_dataset$Property_Area)
train_dataset$Dependents = as.numeric(train_dataset$Dependents)
train_dataset$Credit_History = as.numeric(train_dataset$Credit_History)
#scaling for normalization
train_dataset[,6:9] = scale(train_dataset[,6:9])
train_dataset$totalIncomeTrain = scale(train_dataset$totalIncomeTrain)
View(train_dataset)
str(train_dataset)
#SVM Model
library(e1071)
str(train_dataset)
View(train_dataset)
library(caTools)
set.seed(123)
split = sample.split(train_dataset$Loan_Status,SplitRatio = 0.75)
training_set = train_dataset[split,]
test_set = train_dataset[-split, ]
classifier= svm (Loan_Status ~., data = training_set , kernal = 'linear')
test_set$Predicted_LoanStatus = predict(classifier, newdata = test_set)
View(test_set)
#confusion matrix
table(test_set$Predicted_LoanStatus, test_set$Loan_Status)
summary(classifier)
